//
//  DetailViewController.swift
//  SimpleNews
//
//  Created by Levente Vig on 2020. 12. 06..
//  Copyright (c) 2020. levivig. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Lottie
import UIKit

final class DetailViewController: BaseViewController {
    
    // MARK: - Public properties -
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        .lightContent
    }
    
    var presenter: DetailPresenterInterface!
    
    // MARK: - Private properties -
    
    private var scrollView: UIScrollView!
    private var imageView: UIImageView!
    private var gradientView: GradientView!
    private var titleLabel: UILabel!
    private var sourceLabel: UILabel!
    private var dateLabel: UILabel!
    private var bottomWrapperView: UIView!
    private var descriptionLabel: UILabel!
    private var animationView: AnimationView!
    private var readButton: UIControl!
    private var bookmarkButton: BookmarkButton!
    private var topBarView: UIView!
    
    private var tabbarHeight: CGFloat {
        tabBarController?.tabBar.height ?? 0
    }
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        presenter.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        animationView.play()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        animationView.stop()
    }
    
    override func willMove(toParent parent: UIViewController?) {
        super.willMove(toParent: parent)
        if parent == nil {
            resetNavigationBar()
        }
    }
    
    // MARK: - Initialization -
    
    private func setup() {
        initNavigation()
        initScrollView()
        initImageView()
        initGradientView()
        initTitleLabel()
        initSourceLabel()
        initDateLabel()
        initBottomWrapperView()
        initDescriptionLabel()
        initAnimationView()
        initReadButton()
        initBookmarkButton()
        initTopBarView()
        
        view.setNeedsUpdateConstraints()
        view.layoutIfNeeded()
    }
    
    private func initNavigation() {
        navigationItem.largeTitleDisplayMode = .never
        navigationController?.navigationBar.tintColor = .white
        navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        navigationController?.navigationBar.shadowImage = UIImage()
        navigationController?.navigationBar.isTranslucent = true
        navigationController?.view.backgroundColor = .clear
    }
    
    private func resetNavigationBar() {
        navigationController?.navigationBar.tintColor = .mainTintColor
        navigationController?.navigationBar.setBackgroundImage(nil, for: .default)
        navigationController?.navigationBar.shadowImage = nil
        navigationController?.navigationBar.isTranslucent = true
        navigationController?.view.backgroundColor = nil
        navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.label]
    }
    
    private func initScrollView() {
        scrollView = UIScrollView()
        scrollView.contentInsetAdjustmentBehavior = .never
        scrollView.delegate = self
        scrollView.backgroundColor = .systemBackground
        
        view.addSubview(scrollView)
        scrollView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    private func initImageView() {
        imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        
        scrollView.addSubview(imageView)
        imageView.snp.makeConstraints { make in
            make.leading.centerX.equalToSuperview()
            make.top.equalToSuperview()
            make.height.equalTo(view).offset(-tabbarHeight)
        }
    }
    
    private func initGradientView() {
        gradientView = GradientView(frame: .zero)
        gradientView.isUserInteractionEnabled = false
        
        imageView.addSubview(gradientView)
        gradientView.snp.makeConstraints { make in
            make.edges.equalTo(imageView)
        }
    }
    
    private func initTitleLabel() {
        titleLabel = UILabel()
        titleLabel.textColor = .white
        titleLabel.font = UIFont.preferredFont(forTextStyle: .title1)
        titleLabel.numberOfLines = 0
        
        imageView.addSubview(titleLabel)
        titleLabel.snp.makeConstraints { make in
            make.leading.equalToSuperview().offset(30)
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().multipliedBy(1.3)
        }
    }
    
    private func initSourceLabel() {
        sourceLabel = UILabel()
        sourceLabel.textColor = .white
        sourceLabel.font = UIFont.preferredFont(forTextStyle: .body)
        
        imageView.addSubview(sourceLabel)
        sourceLabel.snp.makeConstraints { make in
            make.leading.equalToSuperview().offset(30)
            make.bottom.equalToSuperview().offset(-20)
        }
    }
    
    private func initDateLabel() {
        dateLabel = UILabel()
        dateLabel.textColor = .white
        dateLabel.font = UIFont.preferredFont(forTextStyle: .body)
        
        imageView.addSubview(dateLabel)
        dateLabel.snp.makeConstraints { make in
            make.trailing.equalToSuperview().offset(-30)
            make.bottom.equalToSuperview().offset(-20)
            make.leading.greaterThanOrEqualTo(sourceLabel.snp.trailing).offset(20)
        }
    }
    
    private func initBottomWrapperView() {
        bottomWrapperView = UIView()
        bottomWrapperView.backgroundColor = .systemBackground
        
        scrollView.addSubview(bottomWrapperView)
        bottomWrapperView.snp.makeConstraints { make in
            make.leading.centerX.equalToSuperview()
            make.top.equalTo(imageView.snp.bottom)
            make.height.equalTo(view).offset(-tabbarHeight)
        }
    }
    
    private func initDescriptionLabel() {
        descriptionLabel = UILabel()
        descriptionLabel.textColor = .label
        descriptionLabel.font = UIFont.preferredFont(forTextStyle: .body)
        descriptionLabel.numberOfLines = 0
        
        bottomWrapperView.addSubview(descriptionLabel)
        descriptionLabel.snp.makeConstraints { make in
            make.leading.equalToSuperview().offset(20)
            make.centerX.equalToSuperview()
            make.top.equalToSuperview().offset(20)
        }
    }
    
    private func initAnimationView() {
        animationView = AnimationView(animation: Animation.named("read_anim"))
        animationView.contentMode = .scaleAspectFill
        animationView.loopMode = .loop
        animationView.play()
        
        bottomWrapperView.addSubview(animationView)
        animationView.snp.makeConstraints { make in
            make.top.greaterThanOrEqualTo(descriptionLabel.snp.bottom).offset(30)
            make.center.equalToSuperview()
            make.width.height.equalTo(300)
        }
    }
    
    private func initReadButton() {
        readButton = ReadButton(frame: .zero)
        readButton.addTarget(self, action: #selector(readButtonTapped), for: .touchUpInside)
        
        bottomWrapperView.addSubview(readButton)
        readButton.snp.makeConstraints { make in
            make.bottom.equalToSuperview().offset(-20-tabbarHeight)
            make.centerX.equalToSuperview()
            make.height.equalTo(44)
        }
    }
    
    private func initBookmarkButton() {
        bookmarkButton = BookmarkButton(withBackground: false)
        bookmarkButton.frame = CGRect(x: 0, y: 0, width: 30, height: 30)
        bookmarkButton.delegate = self
//        bookmarkButton.shouldAnimate = false
        let btn = UIBarButtonItem(customView: bookmarkButton)
        navigationItem.rightBarButtonItem = btn
    }
    
    private func initTopBarView() {
        topBarView = UIView()
        topBarView.backgroundColor = .black
        topBarView.alpha = 0.0
        
        view.addSubview(topBarView)
        updateToBar()
    }
    
    // MARK: - Layout -
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        let bottom = bottomWrapperView.y + bottomWrapperView.height
        scrollView.contentSize = CGSize(width: view.width, height: bottom)
    }
    
    private func updateToBar(offset: CGFloat = 0.0) {
        topBarView.snp.remakeConstraints { make in
            make.leading.top.centerX.equalToSuperview()
            make.height.equalTo(topbarHeight)
        }
        
        let alpha = min(1.0, offset / 300)
//        if alpha - 1.0 < 10e-5 {
            navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white.withAlphaComponent(alpha)]
//        }
        topBarView.alpha = alpha
    }
    
    // MARK: - Action -
    
    @objc private func readButtonTapped() {
        presenter.readButtonTapped()
    }
}

// MARK: - Extensions -

extension DetailViewController: DetailViewInterface {
    func bind(model: NewsArticle) {
        imageView.sd_setImage(with: model.feedCellImageUrl)
        titleLabel.text = model.feedCellTitle
        sourceLabel.text = model.feedCellSource
        dateLabel.text = model.feedCellDate
        descriptionLabel.text = model.description
        
        bookmarkButton.bind(isSelected: model.isBookmark ?? false)
        
        navigationItem.title = model.title
    }
    
}

extension DetailViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offset = scrollView.contentOffset.y
        updateToBar(offset: offset)
    }
}

extension DetailViewController: BookmarButtonDelegate {
    func bookmarkButtonTapped(isOn: Bool) {
        presenter.bookmarkButtonTapped(isOn: isOn)
    }
}
