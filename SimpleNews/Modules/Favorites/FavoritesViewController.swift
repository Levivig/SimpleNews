//
//  FavoritesViewController.swift
//  SimpleNews
//
//  Created by Levente Vig on 2020. 11. 30..
//  Copyright (c) 2020. levivig. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class FavoritesViewController: BaseTabbarProtocolController {
    
    // MARK: - Public properties -
    
    override var tabbarTitle: String? { "Favorites".localized }
    override var tabbarImage: UIImage? { UIImage(systemName: "bookmark") }
    override var selectedTabbarImage: UIImage? { UIImage(systemName: "bookmark.fill") }
    
    var presenter: FavoritesPresenterInterface!
    
    // MARK: - Private properties -
    
    private var collectionView: UICollectionView!
    private var refreshControl: UIRefreshControl!
    private var searchController: UISearchController!
    private var emptyView: FavoritesEmptyView!
    
    private var isEmpty: Bool { presenter.isEmpty() }
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        presenter.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        presenter.viewWillAppear(animated: animated)
        if isEmpty {
            emptyView.play()
        }
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        emptyView.stop()
    }
    
    // MARK: - Initialization -
    
    private func setup() {
        view.backgroundColor = .systemBackground
        initNavigation()
        initCollectionView()
        initEmptyView()
        initRefreshControl()
        initSearchController()
    }
    
    private func initNavigation() {
        navigationController?.setNavigationBarHidden(false, animated: true)
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.largeTitleDisplayMode = .always
        navigationItem.title = "Favorites".localized
    }
    
    private func initCollectionView() {
        let layout = UICollectionViewFlowLayout()
        layout.itemSize = CGSize(width: view.width - 40, height: 200)
        layout.minimumLineSpacing = 20
        layout.minimumInteritemSpacing = 20
        layout.scrollDirection = .vertical
        layout.sectionInset = UIEdgeInsets(top: 20, left: 0, bottom: 20, right: 0)
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .systemBackground
        
        collectionView.dataSource = self
        collectionView.delegate = self
        
        collectionView.register(cellWithClass: FeedCell.self)
        
        view.addSubview(collectionView)
        collectionView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    private func initRefreshControl() {
        refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(refreshTriggered), for: .valueChanged)
        
        collectionView.refreshControl = refreshControl
    }
    
    private func initSearchController() {
        searchController = UISearchController(searchResultsController: nil)
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        navigationItem.searchController = searchController
    }
    
    private func initEmptyView() {
        emptyView = FavoritesEmptyView(frame: .zero)
        emptyView.isHidden = !isEmpty
        
        view.addSubview(emptyView)
        emptyView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
    
    // MARK: - Action -
    
    @objc private func refreshTriggered() {
        presenter.pullToRefresh { _ in
            self.refreshControl.endRefreshing()
        }
    }
}

// MARK: - Extensions -

extension FavoritesViewController: FavoritesViewInterface {
    func reload() {
        DispatchQueue.main.async {
            self.emptyView.isHidden = !self.isEmpty
            self.collectionView.isHidden = self.isEmpty
            if self.isEmpty {
                self.emptyView.play()
            } else {
                self.emptyView.stop()
            }
            self.collectionView.reloadData()
        }
    }
}

extension FavoritesViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        presenter.numberOfSections()
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        presenter.numberOfItems(in: section)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withClass: FeedCell.self, for: indexPath)
        let model = presenter.itemAt(indexPath: indexPath)
        cell.bind(model: model)
        cell.delegate = self
        return cell
    }
}

extension FavoritesViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter.didSelectItemAt(indexPath: indexPath)
    }
}

extension FavoritesViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        let text = searchController.searchBar.text
        presenter.search(for: text)
    }
}

extension FavoritesViewController: FeedCellDelegate {
    func bookmarkToggled(isOn: Bool, newsUrl: String?) {
        presenter.toggleBookmark(isOn: isOn, url: newsUrl)
    }
}
